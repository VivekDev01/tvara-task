import express from 'express';
import axios from 'axios';
import dotenv from 'dotenv';
import { GoogleGenAI } from "@google/genai";


dotenv.config();

const app = express();
app.use(express.json());

// Task2

const ai = new GoogleGenAI({});

async function main(prompt) {
  try {
    const response = await ai.models.generateContent({
    model: "gemini-2.5-flash",
    // contents: "Explain how AI works in a few words",
    contents: prompt,
  });
  console.log(response.text);
  return response;
  } catch (error) {
    console.log(error)
  }
}

app.post('/ask-gemini', async(req, res)=>{
    try {
        // console.log(req.body);
        const prompt = req.body.prompt;
        let response = await main(prompt);
        let text = response.text;
        res.status(200).json({text});
    } catch (error) {
        console.log(error)
    }
})

// main()



// task 3

// create table public."Interview_Tests" (
//   id bigint generated by default as identity not null,
//   created_at timestamp with time zone not null default now(),
//   name text null,
//   field_1 jsonb null,
//   field_2 bigint null,
//   field_3 boolean null,
//   constraint Interview_Tests_pkey primary key (id)
// );


import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

const supabase = createClient(supabaseUrl, supabaseKey);

async function getData() {
  const { data, error } = await supabase
    .from('Interview_Tests')
    .select();
  if (error) throw error;
  return data;
}

app.get('/get-data', async(req, res)=>{
    try {
        const { data, error } = await supabase
            .from('Interview_Tests')
            .select();
        if (error) throw error;
        console.log(data);
        return res.json(data);
    } catch (error) {
        console.log(error)
    }
})

app.post('/inset-data', async (req, res)=>{
    try {
        const { data, error } = await supabase
        .from('Interview_Tests')
        .insert({ name: 'Vivek', field_1: {key: 'value'}, field_2: 123, field_3: true })
        .select();
        if(error) throw error;
        res.json('stored:', data);
    } catch (error) {
        console.log(error)
    }
})

app.put('/update-data/:id', async (req, res)=>{
    try {
        const { id } = req.params;
        const { data, error } = await supabase
        .from('Interview_Tests')
        .update({ name: 'Vivek', field_1: {key: 'value'}, field_2: 123, field_3: true })
        .eq('id', id)
        .select();
    } catch (error) {
        console.log(error)
    }
})

app.listen(3000, ()=>{
    console.log('app is running');
})